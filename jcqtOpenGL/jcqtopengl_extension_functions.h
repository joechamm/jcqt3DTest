/*****************************************************************//**
 * \file   jcqtopengl_extension_functions.h
 * \licence MIT License

Copyright (c) 2022 Joseph Cunningham

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 * \brief  
 * 
 * \author joechamm
 * \date   October 2022
 *********************************************************************/
#ifndef __JCQTOPENGL_EXTENSION_FUNCTIONS_H__
#define __JCQTOPENGL_EXTENSION_FUNCTIONS_H__

#include "jcqtopengl_global.h"
#include <QOpenGLContext>

namespace jcqt
{
	GLAPI bool JCQTOPENGL_EXPORT g_extFunctionsInitialized;

	// GL_ARB_bindless_texture extension functions
	GLAPI PFNGLGETTEXTUREHANDLEARBPROC JCQTOPENGL_EXPORT glGetTextureHandleARB;
	GLAPI PFNGLGETTEXTURESAMPLERHANDLEARBPROC JCQTOPENGL_EXPORT glGetTextureSamplerHandleARB;
	GLAPI PFNGLGETIMAGEHANDLEARBPROC JCQTOPENGL_EXPORT glGetImageHandleARB;
	GLAPI PFNGLMAKETEXTUREHANDLERESIDENTARBPROC JCQTOPENGL_EXPORT glMakeTextureHandleResidentARB;
	GLAPI PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC JCQTOPENGL_EXPORT glMakeTextureHandleNonResidentARB;
	GLAPI PFNGLMAKEIMAGEHANDLERESIDENTARBPROC JCQTOPENGL_EXPORT glMakeImageHandleResidentARB;
	GLAPI PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC JCQTOPENGL_EXPORT glMakeImageHandleNonResidentARB;
	GLAPI PFNGLUNIFORMHANDLEUI64ARBPROC JCQTOPENGL_EXPORT glUniformHandleui64ARB;
	GLAPI PFNGLUNIFORMHANDLEUI64VARBPROC JCQTOPENGL_EXPORT glUniformHandleui64vARB;
	GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC JCQTOPENGL_EXPORT glProgramUniformHandleui64ARB;
	GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC JCQTOPENGL_EXPORT glProgramUniformHandleui64vARB;
	GLAPI PFNGLISTEXTUREHANDLERESIDENTARBPROC JCQTOPENGL_EXPORT glIsTextureHandleResidentARB;
	GLAPI PFNGLISIMAGEHANDLERESIDENTARBPROC JCQTOPENGL_EXPORT glIsImageHandleResidentARB;

	// GL_ARB_indirect_parameters extension functions
	GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC JCQTOPENGL_EXPORT glMultiDrawArraysIndirect;
	GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC JCQTOPENGL_EXPORT glMultiDrawElementsIndirectCount;

	// GL_ARB_gl_spirv exteion functions
	GLAPI PFNGLSPECIALIZESHADERPROC JCQTOPENGL_EXPORT glSpecializeShader;

	// GL_ARB_sparse_buffer
	GLAPI PFNGLBUFFERPAGECOMMITMENTARBPROC JCQTOPENGL_EXPORT glBufferPageCommitmentARB;
	GLAPI PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC JCQTOPENGL_EXPORT glNamedBufferPageCommitmentARB;

	// GL_ARB_polygon_offset_clamp
	GLAPI PFNGLPOLYGONOFFSETCLAMPPROC JCQTOPENGL_EXPORT glPolygonOffsetClamp;

	// GL_ARB_shading_language_include
	GLAPI PFNGLCOMPILESHADERINCLUDEARBPROC JCQTOPENGL_EXPORT glCompileShaderIncludeARB;
	GLAPI PFNGLDELETENAMEDSTRINGARBPROC JCQTOPENGL_EXPORT glDeleteNamedStringARB;
	GLAPI PFNGLGETNAMEDSTRINGARBPROC JCQTOPENGL_EXPORT glGetNamedStringARB;
	GLAPI PFNGLGETNAMEDSTRINGIVARBPROC JCQTOPENGL_EXPORT glGetNamedStringivARB;
	GLAPI PFNGLISNAMEDSTRINGARBPROC JCQTOPENGL_EXPORT glIsNamedStringARB;
	GLAPI PFNGLNAMEDSTRINGARBPROC JCQTOPENGL_EXPORT glNamedStringARB;

	// GL_NV_mesh_shader extension functions
	GLAPI PFNGLDRAWMESHTASKSNVPROC JCQTOPENGL_EXPORT glDrawMeshTasksNV;
	GLAPI PFNGLDRAWMESHTASKSINDIRECTNVPROC JCQTOPENGL_EXPORT glDrawMeshTasksIndirectNV;
	GLAPI PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC JCQTOPENGL_EXPORT glMultiDrawMeshTasksIndirectNV;
	GLAPI PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC JCQTOPENGL_EXPORT glMultiDrawMeshTasksIndirectCountNV;

	// GL_NV_memory_attachment
	GLAPI PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC JCQTOPENGL_EXPORT glGetMemoryObjectDetachedResourcesuivNV;
	GLAPI PFNGLRESETMEMORYOBJECTPARAMETERNVPROC JCQTOPENGL_EXPORT glResetMemoryObjectParameterNV;
	GLAPI PFNGLTEXATTACHMEMORYNVPROC JCQTOPENGL_EXPORT glTexAttachMemoryNV;
	GLAPI PFNGLBUFFERATTACHMEMORYNVPROC JCQTOPENGL_EXPORT glBufferAttachMemoryNV;
	GLAPI PFNGLTEXTUREATTACHMEMORYNVPROC JCQTOPENGL_EXPORT glTextureAttachMemoryNV;
	GLAPI PFNGLNAMEDBUFFERATTACHMEMORYNVPROC JCQTOPENGL_EXPORT glNamedBufferAttachMemoryNV;

	GLAPI bool JCQTOPENGL_EXPORT initExtFunctions ( QOpenGLContext* context );
}

#endif // !__JCQTOPENGL_EXTENSION_FUNCTIONS_H__
